// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: cirrus_ci_service.proto

package api

import (
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Platform int32

const (
	Platform_LINUX   Platform = 0
	Platform_WINDOWS Platform = 1
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "LINUX",
		1: "WINDOWS",
	}
	Platform_value = map[string]int32{
		"LINUX":   0,
		"WINDOWS": 1,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_cirrus_ci_service_proto_enumTypes[0].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_cirrus_ci_service_proto_enumTypes[0]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{0}
}

type Annotation_Level int32

const (
	Annotation_NOTICE  Annotation_Level = 0
	Annotation_WARNING Annotation_Level = 1
	Annotation_FAILURE Annotation_Level = 2
)

// Enum value maps for Annotation_Level.
var (
	Annotation_Level_name = map[int32]string{
		0: "NOTICE",
		1: "WARNING",
		2: "FAILURE",
	}
	Annotation_Level_value = map[string]int32{
		"NOTICE":  0,
		"WARNING": 1,
		"FAILURE": 2,
	}
)

func (x Annotation_Level) Enum() *Annotation_Level {
	p := new(Annotation_Level)
	*p = x
	return p
}

func (x Annotation_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Annotation_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_cirrus_ci_service_proto_enumTypes[1].Descriptor()
}

func (Annotation_Level) Type() protoreflect.EnumType {
	return &file_cirrus_ci_service_proto_enumTypes[1]
}

func (x Annotation_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Annotation_Level.Descriptor instead.
func (Annotation_Level) EnumDescriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{14, 0}
}

type Annotation_Type int32

const (
	Annotation_GENERIC         Annotation_Type = 0
	Annotation_TEST_RESULT     Annotation_Type = 1
	Annotation_LINT_RESULT     Annotation_Type = 2
	Annotation_ANALYSIS_RESULT Annotation_Type = 3
)

// Enum value maps for Annotation_Type.
var (
	Annotation_Type_name = map[int32]string{
		0: "GENERIC",
		1: "TEST_RESULT",
		2: "LINT_RESULT",
		3: "ANALYSIS_RESULT",
	}
	Annotation_Type_value = map[string]int32{
		"GENERIC":         0,
		"TEST_RESULT":     1,
		"LINT_RESULT":     2,
		"ANALYSIS_RESULT": 3,
	}
)

func (x Annotation_Type) Enum() *Annotation_Type {
	p := new(Annotation_Type)
	*p = x
	return p
}

func (x Annotation_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Annotation_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cirrus_ci_service_proto_enumTypes[2].Descriptor()
}

func (Annotation_Type) Type() protoreflect.EnumType {
	return &file_cirrus_ci_service_proto_enumTypes[2]
}

func (x Annotation_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Annotation_Type.Descriptor instead.
func (Annotation_Type) EnumDescriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{14, 1}
}

type Task_Status int32

const (
	Task_CREATED   Task_Status = 0
	Task_TRIGGERED Task_Status = 1
	Task_SCHEDULED Task_Status = 2
	Task_EXECUTING Task_Status = 3 // execution
	Task_ABORTED   Task_Status = 4 // by user or GCP
	Task_FAILED    Task_Status = 5
	Task_COMPLETED Task_Status = 6
	Task_SKIPPED   Task_Status = 7
)

// Enum value maps for Task_Status.
var (
	Task_Status_name = map[int32]string{
		0: "CREATED",
		1: "TRIGGERED",
		2: "SCHEDULED",
		3: "EXECUTING",
		4: "ABORTED",
		5: "FAILED",
		6: "COMPLETED",
		7: "SKIPPED",
	}
	Task_Status_value = map[string]int32{
		"CREATED":   0,
		"TRIGGERED": 1,
		"SCHEDULED": 2,
		"EXECUTING": 3,
		"ABORTED":   4,
		"FAILED":    5,
		"COMPLETED": 6,
		"SKIPPED":   7,
	}
)

func (x Task_Status) Enum() *Task_Status {
	p := new(Task_Status)
	*p = x
	return p
}

func (x Task_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_cirrus_ci_service_proto_enumTypes[3].Descriptor()
}

func (Task_Status) Type() protoreflect.EnumType {
	return &file_cirrus_ci_service_proto_enumTypes[3]
}

func (x Task_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Task_Status.Descriptor instead.
func (Task_Status) EnumDescriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{26, 0}
}

type Command_CommandExecutionBehavior int32

const (
	Command_ON_SUCCESS Command_CommandExecutionBehavior = 0
	Command_ON_FAILURE Command_CommandExecutionBehavior = 1
	Command_ALWAYS     Command_CommandExecutionBehavior = 2
)

// Enum value maps for Command_CommandExecutionBehavior.
var (
	Command_CommandExecutionBehavior_name = map[int32]string{
		0: "ON_SUCCESS",
		1: "ON_FAILURE",
		2: "ALWAYS",
	}
	Command_CommandExecutionBehavior_value = map[string]int32{
		"ON_SUCCESS": 0,
		"ON_FAILURE": 1,
		"ALWAYS":     2,
	}
)

func (x Command_CommandExecutionBehavior) Enum() *Command_CommandExecutionBehavior {
	p := new(Command_CommandExecutionBehavior)
	*p = x
	return p
}

func (x Command_CommandExecutionBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Command_CommandExecutionBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_cirrus_ci_service_proto_enumTypes[4].Descriptor()
}

func (Command_CommandExecutionBehavior) Type() protoreflect.EnumType {
	return &file_cirrus_ci_service_proto_enumTypes[4]
}

func (x Command_CommandExecutionBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Command_CommandExecutionBehavior.Descriptor instead.
func (Command_CommandExecutionBehavior) EnumDescriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{27, 0}
}

type TaskIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId int64  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Secret string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *TaskIdentification) Reset() {
	*x = TaskIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIdentification) ProtoMessage() {}

func (x *TaskIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIdentification.ProtoReflect.Descriptor instead.
func (*TaskIdentification) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{0}
}

func (x *TaskIdentification) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskIdentification) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type DataChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	RedirectUrl string `protobuf:"bytes,2,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
}

func (x *DataChunk) Reset() {
	*x = DataChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChunk) ProtoMessage() {}

func (x *DataChunk) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChunk.ProtoReflect.Descriptor instead.
func (*DataChunk) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{1}
}

func (x *DataChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DataChunk) GetRedirectUrl() string {
	if x != nil {
		return x.RedirectUrl
	}
	return ""
}

type InitialCommandsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdentification  *TaskIdentification `protobuf:"bytes,1,opt,name=task_identification,json=taskIdentification,proto3" json:"task_identification,omitempty"`
	LocalTimestamp      int64               `protobuf:"varint,2,opt,name=local_timestamp,json=localTimestamp,proto3" json:"local_timestamp,omitempty"`
	ContinueFromCommand string              `protobuf:"bytes,3,opt,name=continue_from_command,json=continueFromCommand,proto3" json:"continue_from_command,omitempty"`
}

func (x *InitialCommandsRequest) Reset() {
	*x = InitialCommandsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialCommandsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialCommandsRequest) ProtoMessage() {}

func (x *InitialCommandsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialCommandsRequest.ProtoReflect.Descriptor instead.
func (*InitialCommandsRequest) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{2}
}

func (x *InitialCommandsRequest) GetTaskIdentification() *TaskIdentification {
	if x != nil {
		return x.TaskIdentification
	}
	return nil
}

func (x *InitialCommandsRequest) GetLocalTimestamp() int64 {
	if x != nil {
		return x.LocalTimestamp
	}
	return 0
}

func (x *InitialCommandsRequest) GetContinueFromCommand() string {
	if x != nil {
		return x.ContinueFromCommand
	}
	return ""
}

type LogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*LogEntry_Key
	//	*LogEntry_Chunk
	Value isLogEntry_Value `protobuf_oneof:"value"`
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{3}
}

func (m *LogEntry) GetValue() isLogEntry_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *LogEntry) GetKey() *LogEntry_LogKey {
	if x, ok := x.GetValue().(*LogEntry_Key); ok {
		return x.Key
	}
	return nil
}

func (x *LogEntry) GetChunk() *DataChunk {
	if x, ok := x.GetValue().(*LogEntry_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isLogEntry_Value interface {
	isLogEntry_Value()
}

type LogEntry_Key struct {
	Key *LogEntry_LogKey `protobuf:"bytes,1,opt,name=key,proto3,oneof"`
}

type LogEntry_Chunk struct {
	Chunk *DataChunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*LogEntry_Key) isLogEntry_Value() {}

func (*LogEntry_Chunk) isLogEntry_Value() {}

type UploadLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesLogged int64 `protobuf:"varint,1,opt,name=bytes_logged,json=bytesLogged,proto3" json:"bytes_logged,omitempty"`
}

func (x *UploadLogsResponse) Reset() {
	*x = UploadLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadLogsResponse) ProtoMessage() {}

func (x *UploadLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadLogsResponse.ProtoReflect.Descriptor instead.
func (*UploadLogsResponse) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{4}
}

func (x *UploadLogsResponse) GetBytesLogged() int64 {
	if x != nil {
		return x.BytesLogged
	}
	return 0
}

type CacheEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*CacheEntry_Key
	//	*CacheEntry_Chunk
	Value isCacheEntry_Value `protobuf_oneof:"value"`
}

func (x *CacheEntry) Reset() {
	*x = CacheEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheEntry) ProtoMessage() {}

func (x *CacheEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheEntry.ProtoReflect.Descriptor instead.
func (*CacheEntry) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{5}
}

func (m *CacheEntry) GetValue() isCacheEntry_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *CacheEntry) GetKey() *CacheEntry_CacheKey {
	if x, ok := x.GetValue().(*CacheEntry_Key); ok {
		return x.Key
	}
	return nil
}

func (x *CacheEntry) GetChunk() *DataChunk {
	if x, ok := x.GetValue().(*CacheEntry_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isCacheEntry_Value interface {
	isCacheEntry_Value()
}

type CacheEntry_Key struct {
	Key *CacheEntry_CacheKey `protobuf:"bytes,1,opt,name=key,proto3,oneof"`
}

type CacheEntry_Chunk struct {
	Chunk *DataChunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*CacheEntry_Key) isCacheEntry_Value() {}

func (*CacheEntry_Chunk) isCacheEntry_Value() {}

type UploadCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesSaved int64 `protobuf:"varint,1,opt,name=bytes_saved,json=bytesSaved,proto3" json:"bytes_saved,omitempty"`
}

func (x *UploadCacheResponse) Reset() {
	*x = UploadCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadCacheResponse) ProtoMessage() {}

func (x *UploadCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadCacheResponse.ProtoReflect.Descriptor instead.
func (*UploadCacheResponse) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{6}
}

func (x *UploadCacheResponse) GetBytesSaved() int64 {
	if x != nil {
		return x.BytesSaved
	}
	return 0
}

type ArtifactEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ArtifactEntry_ArtifactsUpload_
	//	*ArtifactEntry_Chunk
	Value isArtifactEntry_Value `protobuf_oneof:"value"`
}

func (x *ArtifactEntry) Reset() {
	*x = ArtifactEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactEntry) ProtoMessage() {}

func (x *ArtifactEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactEntry.ProtoReflect.Descriptor instead.
func (*ArtifactEntry) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{7}
}

func (m *ArtifactEntry) GetValue() isArtifactEntry_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ArtifactEntry) GetArtifactsUpload() *ArtifactEntry_ArtifactsUpload {
	if x, ok := x.GetValue().(*ArtifactEntry_ArtifactsUpload_); ok {
		return x.ArtifactsUpload
	}
	return nil
}

func (x *ArtifactEntry) GetChunk() *ArtifactEntry_ArtifactChunk {
	if x, ok := x.GetValue().(*ArtifactEntry_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isArtifactEntry_Value interface {
	isArtifactEntry_Value()
}

type ArtifactEntry_ArtifactsUpload_ struct {
	ArtifactsUpload *ArtifactEntry_ArtifactsUpload `protobuf:"bytes,1,opt,name=artifacts_upload,json=artifactsUpload,proto3,oneof"`
}

type ArtifactEntry_Chunk struct {
	Chunk *ArtifactEntry_ArtifactChunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*ArtifactEntry_ArtifactsUpload_) isArtifactEntry_Value() {}

func (*ArtifactEntry_Chunk) isArtifactEntry_Value() {}

type UploadArtifactsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesSaved int64 `protobuf:"varint,1,opt,name=bytes_saved,json=bytesSaved,proto3" json:"bytes_saved,omitempty"`
}

func (x *UploadArtifactsResponse) Reset() {
	*x = UploadArtifactsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadArtifactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadArtifactsResponse) ProtoMessage() {}

func (x *UploadArtifactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadArtifactsResponse.ProtoReflect.Descriptor instead.
func (*UploadArtifactsResponse) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{8}
}

func (x *UploadArtifactsResponse) GetBytesSaved() int64 {
	if x != nil {
		return x.BytesSaved
	}
	return 0
}

type DownloadCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdentification *TaskIdentification `protobuf:"bytes,1,opt,name=task_identification,json=taskIdentification,proto3" json:"task_identification,omitempty"`
	CacheKey           string              `protobuf:"bytes,2,opt,name=cache_key,json=cacheKey,proto3" json:"cache_key,omitempty"`
}

func (x *DownloadCacheRequest) Reset() {
	*x = DownloadCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadCacheRequest) ProtoMessage() {}

func (x *DownloadCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadCacheRequest.ProtoReflect.Descriptor instead.
func (*DownloadCacheRequest) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{9}
}

func (x *DownloadCacheRequest) GetTaskIdentification() *TaskIdentification {
	if x != nil {
		return x.TaskIdentification
	}
	return nil
}

func (x *DownloadCacheRequest) GetCacheKey() string {
	if x != nil {
		return x.CacheKey
	}
	return ""
}

type CommandsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment       map[string]string `protobuf:"bytes,1,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Commands          []*Command        `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
	ServerToken       string            `protobuf:"bytes,3,opt,name=serverToken,proto3" json:"serverToken,omitempty"`
	TimeoutInSeconds  int64             `protobuf:"varint,4,opt,name=timeout_in_seconds,json=timeoutInSeconds,proto3" json:"timeout_in_seconds,omitempty"`
	SecretsToMask     []string          `protobuf:"bytes,5,rep,name=secrets_to_mask,json=secretsToMask,proto3" json:"secrets_to_mask,omitempty"`
	FailedAtLeastOnce bool              `protobuf:"varint,6,opt,name=failed_at_least_once,json=failedAtLeastOnce,proto3" json:"failed_at_least_once,omitempty"`
}

func (x *CommandsResponse) Reset() {
	*x = CommandsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandsResponse) ProtoMessage() {}

func (x *CommandsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandsResponse.ProtoReflect.Descriptor instead.
func (*CommandsResponse) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{10}
}

func (x *CommandsResponse) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *CommandsResponse) GetCommands() []*Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *CommandsResponse) GetServerToken() string {
	if x != nil {
		return x.ServerToken
	}
	return ""
}

func (x *CommandsResponse) GetTimeoutInSeconds() int64 {
	if x != nil {
		return x.TimeoutInSeconds
	}
	return 0
}

func (x *CommandsResponse) GetSecretsToMask() []string {
	if x != nil {
		return x.SecretsToMask
	}
	return nil
}

func (x *CommandsResponse) GetFailedAtLeastOnce() bool {
	if x != nil {
		return x.FailedAtLeastOnce
	}
	return false
}

type ReportSingleCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdentification *TaskIdentification `protobuf:"bytes,1,opt,name=task_identification,json=taskIdentification,proto3" json:"task_identification,omitempty"`
	CommandName        string              `protobuf:"bytes,2,opt,name=command_name,json=commandName,proto3" json:"command_name,omitempty"`
	Succeded           bool                `protobuf:"varint,3,opt,name=succeded,proto3" json:"succeded,omitempty"`
	DurationInSeconds  int64               `protobuf:"varint,4,opt,name=duration_in_seconds,json=durationInSeconds,proto3" json:"duration_in_seconds,omitempty"`
	SignaledToExit     bool                `protobuf:"varint,5,opt,name=signaled_to_exit,json=signaledToExit,proto3" json:"signaled_to_exit,omitempty"`
	LocalTimestamp     int64               `protobuf:"varint,6,opt,name=local_timestamp,json=localTimestamp,proto3" json:"local_timestamp,omitempty"`
}

func (x *ReportSingleCommandRequest) Reset() {
	*x = ReportSingleCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportSingleCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSingleCommandRequest) ProtoMessage() {}

func (x *ReportSingleCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSingleCommandRequest.ProtoReflect.Descriptor instead.
func (*ReportSingleCommandRequest) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{11}
}

func (x *ReportSingleCommandRequest) GetTaskIdentification() *TaskIdentification {
	if x != nil {
		return x.TaskIdentification
	}
	return nil
}

func (x *ReportSingleCommandRequest) GetCommandName() string {
	if x != nil {
		return x.CommandName
	}
	return ""
}

func (x *ReportSingleCommandRequest) GetSucceded() bool {
	if x != nil {
		return x.Succeded
	}
	return false
}

func (x *ReportSingleCommandRequest) GetDurationInSeconds() int64 {
	if x != nil {
		return x.DurationInSeconds
	}
	return 0
}

func (x *ReportSingleCommandRequest) GetSignaledToExit() bool {
	if x != nil {
		return x.SignaledToExit
	}
	return false
}

func (x *ReportSingleCommandRequest) GetLocalTimestamp() int64 {
	if x != nil {
		return x.LocalTimestamp
	}
	return 0
}

type ReportSingleCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextCommandName       string            `protobuf:"bytes,1,opt,name=next_command_name,json=nextCommandName,proto3" json:"next_command_name,omitempty"`
	AdditionalEnvironment map[string]string `protobuf:"bytes,2,rep,name=additional_environment,json=additionalEnvironment,proto3" json:"additional_environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReportSingleCommandResponse) Reset() {
	*x = ReportSingleCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportSingleCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSingleCommandResponse) ProtoMessage() {}

func (x *ReportSingleCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSingleCommandResponse.ProtoReflect.Descriptor instead.
func (*ReportSingleCommandResponse) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{12}
}

func (x *ReportSingleCommandResponse) GetNextCommandName() string {
	if x != nil {
		return x.NextCommandName
	}
	return ""
}

func (x *ReportSingleCommandResponse) GetAdditionalEnvironment() map[string]string {
	if x != nil {
		return x.AdditionalEnvironment
	}
	return nil
}

type ReportAnnotationsCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdentification *TaskIdentification `protobuf:"bytes,1,opt,name=task_identification,json=taskIdentification,proto3" json:"task_identification,omitempty"`
	Annotations        []*Annotation       `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *ReportAnnotationsCommandRequest) Reset() {
	*x = ReportAnnotationsCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportAnnotationsCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportAnnotationsCommandRequest) ProtoMessage() {}

func (x *ReportAnnotationsCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportAnnotationsCommandRequest.ProtoReflect.Descriptor instead.
func (*ReportAnnotationsCommandRequest) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{13}
}

func (x *ReportAnnotationsCommandRequest) GetTaskIdentification() *TaskIdentification {
	if x != nil {
		return x.TaskIdentification
	}
	return nil
}

func (x *ReportAnnotationsCommandRequest) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               Annotation_Type          `protobuf:"varint,1,opt,name=type,proto3,enum=org.cirruslabs.ci.services.cirruscigrpc.Annotation_Type" json:"type,omitempty"`
	Level              Annotation_Level         `protobuf:"varint,2,opt,name=level,proto3,enum=org.cirruslabs.ci.services.cirruscigrpc.Annotation_Level" json:"level,omitempty"`
	Message            string                   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	RawDetails         string                   `protobuf:"bytes,4,opt,name=raw_details,json=rawDetails,proto3" json:"raw_details,omitempty"`
	FullyQualifiedName string                   `protobuf:"bytes,5,opt,name=fully_qualified_name,json=fullyQualifiedName,proto3" json:"fully_qualified_name,omitempty"`
	FileLocation       *Annotation_FileLocation `protobuf:"bytes,6,opt,name=file_location,json=fileLocation,proto3" json:"file_location,omitempty"`
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{14}
}

func (x *Annotation) GetType() Annotation_Type {
	if x != nil {
		return x.Type
	}
	return Annotation_GENERIC
}

func (x *Annotation) GetLevel() Annotation_Level {
	if x != nil {
		return x.Level
	}
	return Annotation_NOTICE
}

func (x *Annotation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Annotation) GetRawDetails() string {
	if x != nil {
		return x.RawDetails
	}
	return ""
}

func (x *Annotation) GetFullyQualifiedName() string {
	if x != nil {
		return x.FullyQualifiedName
	}
	return ""
}

func (x *Annotation) GetFileLocation() *Annotation_FileLocation {
	if x != nil {
		return x.FileLocation
	}
	return nil
}

type HeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdentification *TaskIdentification `protobuf:"bytes,1,opt,name=task_identification,json=taskIdentification,proto3" json:"task_identification,omitempty"`
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{15}
}

func (x *HeartbeatRequest) GetTaskIdentification() *TaskIdentification {
	if x != nil {
		return x.TaskIdentification
	}
	return nil
}

type HeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{16}
}

type CacheInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdentification *TaskIdentification `protobuf:"bytes,1,opt,name=task_identification,json=taskIdentification,proto3" json:"task_identification,omitempty"`
	CacheKey           string              `protobuf:"bytes,2,opt,name=cache_key,json=cacheKey,proto3" json:"cache_key,omitempty"`
}

func (x *CacheInfoRequest) Reset() {
	*x = CacheInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheInfoRequest) ProtoMessage() {}

func (x *CacheInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheInfoRequest.ProtoReflect.Descriptor instead.
func (*CacheInfoRequest) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{17}
}

func (x *CacheInfoRequest) GetTaskIdentification() *TaskIdentification {
	if x != nil {
		return x.TaskIdentification
	}
	return nil
}

func (x *CacheInfoRequest) GetCacheKey() string {
	if x != nil {
		return x.CacheKey
	}
	return ""
}

type CacheInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key               string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	SizeInBytes       int64  `protobuf:"varint,2,opt,name=size_in_bytes,json=sizeInBytes,proto3" json:"size_in_bytes,omitempty"`
	CreationTimestamp int64  `protobuf:"varint,3,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	CreatedByTaskId   int64  `protobuf:"varint,4,opt,name=created_by_task_id,json=createdByTaskId,proto3" json:"created_by_task_id,omitempty"`
}

func (x *CacheInfo) Reset() {
	*x = CacheInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheInfo) ProtoMessage() {}

func (x *CacheInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheInfo.ProtoReflect.Descriptor instead.
func (*CacheInfo) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{18}
}

func (x *CacheInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CacheInfo) GetSizeInBytes() int64 {
	if x != nil {
		return x.SizeInBytes
	}
	return 0
}

func (x *CacheInfo) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *CacheInfo) GetCreatedByTaskId() int64 {
	if x != nil {
		return x.CreatedByTaskId
	}
	return 0
}

type CacheInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CacheInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *CacheInfoResponse) Reset() {
	*x = CacheInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheInfoResponse) ProtoMessage() {}

func (x *CacheInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheInfoResponse.ProtoReflect.Descriptor instead.
func (*CacheInfoResponse) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{19}
}

func (x *CacheInfoResponse) GetInfo() *CacheInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type ReportAgentProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdentification *TaskIdentification `protobuf:"bytes,1,opt,name=task_identification,json=taskIdentification,proto3" json:"task_identification,omitempty"`
	Message            string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Stack              string              `protobuf:"bytes,3,opt,name=stack,proto3" json:"stack,omitempty"`
}

func (x *ReportAgentProblemRequest) Reset() {
	*x = ReportAgentProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportAgentProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportAgentProblemRequest) ProtoMessage() {}

func (x *ReportAgentProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportAgentProblemRequest.ProtoReflect.Descriptor instead.
func (*ReportAgentProblemRequest) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{20}
}

func (x *ReportAgentProblemRequest) GetTaskIdentification() *TaskIdentification {
	if x != nil {
		return x.TaskIdentification
	}
	return nil
}

func (x *ReportAgentProblemRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReportAgentProblemRequest) GetStack() string {
	if x != nil {
		return x.Stack
	}
	return ""
}

type ReportStopHookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdentification *TaskIdentification `protobuf:"bytes,1,opt,name=task_identification,json=taskIdentification,proto3" json:"task_identification,omitempty"`
}

func (x *ReportStopHookRequest) Reset() {
	*x = ReportStopHookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStopHookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStopHookRequest) ProtoMessage() {}

func (x *ReportStopHookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStopHookRequest.ProtoReflect.Descriptor instead.
func (*ReportStopHookRequest) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{21}
}

func (x *ReportStopHookRequest) GetTaskIdentification() *TaskIdentification {
	if x != nil {
		return x.TaskIdentification
	}
	return nil
}

type ReportAgentSignalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdentification *TaskIdentification `protobuf:"bytes,1,opt,name=task_identification,json=taskIdentification,proto3" json:"task_identification,omitempty"`
	Signal             string              `protobuf:"bytes,2,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (x *ReportAgentSignalRequest) Reset() {
	*x = ReportAgentSignalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportAgentSignalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportAgentSignalRequest) ProtoMessage() {}

func (x *ReportAgentSignalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportAgentSignalRequest.ProtoReflect.Descriptor instead.
func (*ReportAgentSignalRequest) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{22}
}

func (x *ReportAgentSignalRequest) GetTaskIdentification() *TaskIdentification {
	if x != nil {
		return x.TaskIdentification
	}
	return nil
}

func (x *ReportAgentSignalRequest) GetSignal() string {
	if x != nil {
		return x.Signal
	}
	return ""
}

type ReportAgentLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdentification *TaskIdentification `protobuf:"bytes,1,opt,name=task_identification,json=taskIdentification,proto3" json:"task_identification,omitempty"`
	Logs               string              `protobuf:"bytes,2,opt,name=logs,proto3" json:"logs,omitempty"`
}

func (x *ReportAgentLogsRequest) Reset() {
	*x = ReportAgentLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportAgentLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportAgentLogsRequest) ProtoMessage() {}

func (x *ReportAgentLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportAgentLogsRequest.ProtoReflect.Descriptor instead.
func (*ReportAgentLogsRequest) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{23}
}

func (x *ReportAgentLogsRequest) GetTaskIdentification() *TaskIdentification {
	if x != nil {
		return x.TaskIdentification
	}
	return nil
}

func (x *ReportAgentLogsRequest) GetLogs() string {
	if x != nil {
		return x.Logs
	}
	return ""
}

type ParseConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config        string            `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Environment   map[string]string `protobuf:"bytes,2,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AffectedFiles []string          `protobuf:"bytes,3,rep,name=affectedFiles,proto3" json:"affectedFiles,omitempty"`
	FilesContents map[string]string `protobuf:"bytes,4,rep,name=filesContents,proto3" json:"filesContents,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ParseConfigRequest) Reset() {
	*x = ParseConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseConfigRequest) ProtoMessage() {}

func (x *ParseConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseConfigRequest.ProtoReflect.Descriptor instead.
func (*ParseConfigRequest) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{24}
}

func (x *ParseConfigRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *ParseConfigRequest) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *ParseConfigRequest) GetAffectedFiles() []string {
	if x != nil {
		return x.AffectedFiles
	}
	return nil
}

func (x *ParseConfigRequest) GetFilesContents() map[string]string {
	if x != nil {
		return x.FilesContents
	}
	return nil
}

type ParseConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *ParseConfigResponse) Reset() {
	*x = ParseConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseConfigResponse) ProtoMessage() {}

func (x *ParseConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseConfigResponse.ProtoReflect.Descriptor instead.
func (*ParseConfigResponse) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{25}
}

func (x *ParseConfigResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalGroupId       int64             `protobuf:"varint,1,opt,name=local_group_id,json=localGroupId,proto3" json:"local_group_id,omitempty"`
	RequiredGroups     []int64           `protobuf:"varint,2,rep,packed,name=required_groups,json=requiredGroups,proto3" json:"required_groups,omitempty"`
	Name               string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status             Task_Status       `protobuf:"varint,4,opt,name=status,proto3,enum=org.cirruslabs.ci.services.cirruscigrpc.Task_Status" json:"status,omitempty"`
	Environment        map[string]string `protobuf:"bytes,5,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metadata           *Task_Metadata    `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	DeprecatedInstance *Task_Instance    `protobuf:"bytes,7,opt,name=deprecated_instance,json=deprecatedInstance,proto3" json:"deprecated_instance,omitempty"`
	Commands           []*Command        `protobuf:"bytes,8,rep,name=commands,proto3" json:"commands,omitempty"`
	Instance           *any.Any          `protobuf:"bytes,9,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{26}
}

func (x *Task) GetLocalGroupId() int64 {
	if x != nil {
		return x.LocalGroupId
	}
	return 0
}

func (x *Task) GetRequiredGroups() []int64 {
	if x != nil {
		return x.RequiredGroups
	}
	return nil
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetStatus() Task_Status {
	if x != nil {
		return x.Status
	}
	return Task_CREATED
}

func (x *Task) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *Task) GetMetadata() *Task_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Task) GetDeprecatedInstance() *Task_Instance {
	if x != nil {
		return x.DeprecatedInstance
	}
	return nil
}

func (x *Task) GetCommands() []*Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *Task) GetInstance() *any.Any {
	if x != nil {
		return x.Instance
	}
	return nil
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Instruction:
	//	*Command_ExitInstruction
	//	*Command_ScriptInstruction
	//	*Command_BackgroundScriptInstruction
	//	*Command_CacheInstruction
	//	*Command_UploadCacheInstruction
	//	*Command_CloneInstruction
	//	*Command_FileInstruction
	//	*Command_ArtifactsInstruction
	Instruction        isCommand_Instruction            `protobuf_oneof:"instruction"`
	ExecutionBehaviour Command_CommandExecutionBehavior `protobuf:"varint,10,opt,name=execution_behaviour,json=executionBehaviour,proto3,enum=org.cirruslabs.ci.services.cirruscigrpc.Command_CommandExecutionBehavior" json:"execution_behaviour,omitempty"`
	Properties         map[string]string                `protobuf:"bytes,11,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{27}
}

func (x *Command) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Command) GetInstruction() isCommand_Instruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

func (x *Command) GetExitInstruction() *ExitInstruction {
	if x, ok := x.GetInstruction().(*Command_ExitInstruction); ok {
		return x.ExitInstruction
	}
	return nil
}

func (x *Command) GetScriptInstruction() *ScriptInstruction {
	if x, ok := x.GetInstruction().(*Command_ScriptInstruction); ok {
		return x.ScriptInstruction
	}
	return nil
}

func (x *Command) GetBackgroundScriptInstruction() *BackgroundScriptInstruction {
	if x, ok := x.GetInstruction().(*Command_BackgroundScriptInstruction); ok {
		return x.BackgroundScriptInstruction
	}
	return nil
}

func (x *Command) GetCacheInstruction() *CacheInstruction {
	if x, ok := x.GetInstruction().(*Command_CacheInstruction); ok {
		return x.CacheInstruction
	}
	return nil
}

func (x *Command) GetUploadCacheInstruction() *UploadCacheInstruction {
	if x, ok := x.GetInstruction().(*Command_UploadCacheInstruction); ok {
		return x.UploadCacheInstruction
	}
	return nil
}

func (x *Command) GetCloneInstruction() *CloneInstruction {
	if x, ok := x.GetInstruction().(*Command_CloneInstruction); ok {
		return x.CloneInstruction
	}
	return nil
}

func (x *Command) GetFileInstruction() *FileInstruction {
	if x, ok := x.GetInstruction().(*Command_FileInstruction); ok {
		return x.FileInstruction
	}
	return nil
}

func (x *Command) GetArtifactsInstruction() *ArtifactsInstruction {
	if x, ok := x.GetInstruction().(*Command_ArtifactsInstruction); ok {
		return x.ArtifactsInstruction
	}
	return nil
}

func (x *Command) GetExecutionBehaviour() Command_CommandExecutionBehavior {
	if x != nil {
		return x.ExecutionBehaviour
	}
	return Command_ON_SUCCESS
}

func (x *Command) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type isCommand_Instruction interface {
	isCommand_Instruction()
}

type Command_ExitInstruction struct {
	ExitInstruction *ExitInstruction `protobuf:"bytes,2,opt,name=exit_instruction,json=exitInstruction,proto3,oneof"`
}

type Command_ScriptInstruction struct {
	ScriptInstruction *ScriptInstruction `protobuf:"bytes,3,opt,name=script_instruction,json=scriptInstruction,proto3,oneof"`
}

type Command_BackgroundScriptInstruction struct {
	BackgroundScriptInstruction *BackgroundScriptInstruction `protobuf:"bytes,4,opt,name=background_script_instruction,json=backgroundScriptInstruction,proto3,oneof"`
}

type Command_CacheInstruction struct {
	CacheInstruction *CacheInstruction `protobuf:"bytes,5,opt,name=cache_instruction,json=cacheInstruction,proto3,oneof"`
}

type Command_UploadCacheInstruction struct {
	UploadCacheInstruction *UploadCacheInstruction `protobuf:"bytes,6,opt,name=upload_cache_instruction,json=uploadCacheInstruction,proto3,oneof"`
}

type Command_CloneInstruction struct {
	CloneInstruction *CloneInstruction `protobuf:"bytes,7,opt,name=clone_instruction,json=cloneInstruction,proto3,oneof"`
}

type Command_FileInstruction struct {
	FileInstruction *FileInstruction `protobuf:"bytes,8,opt,name=file_instruction,json=fileInstruction,proto3,oneof"`
}

type Command_ArtifactsInstruction struct {
	ArtifactsInstruction *ArtifactsInstruction `protobuf:"bytes,9,opt,name=artifacts_instruction,json=artifactsInstruction,proto3,oneof"`
}

func (*Command_ExitInstruction) isCommand_Instruction() {}

func (*Command_ScriptInstruction) isCommand_Instruction() {}

func (*Command_BackgroundScriptInstruction) isCommand_Instruction() {}

func (*Command_CacheInstruction) isCommand_Instruction() {}

func (*Command_UploadCacheInstruction) isCommand_Instruction() {}

func (*Command_CloneInstruction) isCommand_Instruction() {}

func (*Command_FileInstruction) isCommand_Instruction() {}

func (*Command_ArtifactsInstruction) isCommand_Instruction() {}

type ExitInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExitInstruction) Reset() {
	*x = ExitInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitInstruction) ProtoMessage() {}

func (x *ExitInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitInstruction.ProtoReflect.Descriptor instead.
func (*ExitInstruction) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{28}
}

type ScriptInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scripts []string `protobuf:"bytes,1,rep,name=scripts,proto3" json:"scripts,omitempty"`
}

func (x *ScriptInstruction) Reset() {
	*x = ScriptInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptInstruction) ProtoMessage() {}

func (x *ScriptInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptInstruction.ProtoReflect.Descriptor instead.
func (*ScriptInstruction) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{29}
}

func (x *ScriptInstruction) GetScripts() []string {
	if x != nil {
		return x.Scripts
	}
	return nil
}

type BackgroundScriptInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scripts []string `protobuf:"bytes,1,rep,name=scripts,proto3" json:"scripts,omitempty"`
}

func (x *BackgroundScriptInstruction) Reset() {
	*x = BackgroundScriptInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundScriptInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundScriptInstruction) ProtoMessage() {}

func (x *BackgroundScriptInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundScriptInstruction.ProtoReflect.Descriptor instead.
func (*BackgroundScriptInstruction) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{30}
}

func (x *BackgroundScriptInstruction) GetScripts() []string {
	if x != nil {
		return x.Scripts
	}
	return nil
}

type CacheInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Folder             string   `protobuf:"bytes,1,opt,name=folder,proto3" json:"folder,omitempty"`
	FingerprintScripts []string `protobuf:"bytes,2,rep,name=fingerprint_scripts,json=fingerprintScripts,proto3" json:"fingerprint_scripts,omitempty"`
	PopulateScripts    []string `protobuf:"bytes,3,rep,name=populate_scripts,json=populateScripts,proto3" json:"populate_scripts,omitempty"`
	ReuploadOnChanges  bool     `protobuf:"varint,4,opt,name=reupload_on_changes,json=reuploadOnChanges,proto3" json:"reupload_on_changes,omitempty"`
}

func (x *CacheInstruction) Reset() {
	*x = CacheInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheInstruction) ProtoMessage() {}

func (x *CacheInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheInstruction.ProtoReflect.Descriptor instead.
func (*CacheInstruction) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{31}
}

func (x *CacheInstruction) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *CacheInstruction) GetFingerprintScripts() []string {
	if x != nil {
		return x.FingerprintScripts
	}
	return nil
}

func (x *CacheInstruction) GetPopulateScripts() []string {
	if x != nil {
		return x.PopulateScripts
	}
	return nil
}

func (x *CacheInstruction) GetReuploadOnChanges() bool {
	if x != nil {
		return x.ReuploadOnChanges
	}
	return false
}

type UploadCacheInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheName string `protobuf:"bytes,1,opt,name=cache_name,json=cacheName,proto3" json:"cache_name,omitempty"`
}

func (x *UploadCacheInstruction) Reset() {
	*x = UploadCacheInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadCacheInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadCacheInstruction) ProtoMessage() {}

func (x *UploadCacheInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadCacheInstruction.ProtoReflect.Descriptor instead.
func (*UploadCacheInstruction) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{32}
}

func (x *UploadCacheInstruction) GetCacheName() string {
	if x != nil {
		return x.CacheName
	}
	return ""
}

type CloneInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloneInstruction) Reset() {
	*x = CloneInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneInstruction) ProtoMessage() {}

func (x *CloneInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneInstruction.ProtoReflect.Descriptor instead.
func (*CloneInstruction) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{33}
}

type FileInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationPath string `protobuf:"bytes,1,opt,name=destination_path,json=destinationPath,proto3" json:"destination_path,omitempty"`
	// Types that are assignable to Source:
	//	*FileInstruction_FromEnvironmentVariable
	Source isFileInstruction_Source `protobuf_oneof:"source"`
}

func (x *FileInstruction) Reset() {
	*x = FileInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInstruction) ProtoMessage() {}

func (x *FileInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInstruction.ProtoReflect.Descriptor instead.
func (*FileInstruction) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{34}
}

func (x *FileInstruction) GetDestinationPath() string {
	if x != nil {
		return x.DestinationPath
	}
	return ""
}

func (m *FileInstruction) GetSource() isFileInstruction_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *FileInstruction) GetFromEnvironmentVariable() string {
	if x, ok := x.GetSource().(*FileInstruction_FromEnvironmentVariable); ok {
		return x.FromEnvironmentVariable
	}
	return ""
}

type isFileInstruction_Source interface {
	isFileInstruction_Source()
}

type FileInstruction_FromEnvironmentVariable struct {
	FromEnvironmentVariable string `protobuf:"bytes,2,opt,name=from_environment_variable,json=fromEnvironmentVariable,proto3,oneof"`
}

func (*FileInstruction_FromEnvironmentVariable) isFileInstruction_Source() {}

type ArtifactsInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths  []string `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	Type   string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Format string   `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *ArtifactsInstruction) Reset() {
	*x = ArtifactsInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsInstruction) ProtoMessage() {}

func (x *ArtifactsInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsInstruction.ProtoReflect.Descriptor instead.
func (*ArtifactsInstruction) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{35}
}

func (x *ArtifactsInstruction) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *ArtifactsInstruction) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ArtifactsInstruction) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type PipeInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu    float32 `protobuf:"fixed32,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory uint32  `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *PipeInstance) Reset() {
	*x = PipeInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipeInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipeInstance) ProtoMessage() {}

func (x *PipeInstance) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipeInstance.ProtoReflect.Descriptor instead.
func (*PipeInstance) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{36}
}

func (x *PipeInstance) GetCpu() float32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *PipeInstance) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

type ContainerInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image                  string                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Cpu                    float32                `protobuf:"fixed32,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory                 uint32                 `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"` // in MB
	AdditionalContainers   []*AdditionalContainer `protobuf:"bytes,4,rep,name=additional_containers,json=additionalContainers,proto3" json:"additional_containers,omitempty"`
	Platform               Platform               `protobuf:"varint,5,opt,name=platform,proto3,enum=org.cirruslabs.ci.services.cirruscigrpc.Platform" json:"platform,omitempty"`
	DockerfilePath         string                 `protobuf:"bytes,6,opt,name=dockerfile_path,json=dockerfilePath,proto3" json:"dockerfile_path,omitempty"`
	OperationSystemVersion string                 `protobuf:"bytes,7,opt,name=operation_system_version,json=operationSystemVersion,proto3" json:"operation_system_version,omitempty"`
	DockerArguments        map[string]string      `protobuf:"bytes,9,rep,name=docker_arguments,json=dockerArguments,proto3" json:"docker_arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Privileged             bool                   `protobuf:"varint,10,opt,name=privileged,proto3" json:"privileged,omitempty"`
}

func (x *ContainerInstance) Reset() {
	*x = ContainerInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInstance) ProtoMessage() {}

func (x *ContainerInstance) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInstance.ProtoReflect.Descriptor instead.
func (*ContainerInstance) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{37}
}

func (x *ContainerInstance) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ContainerInstance) GetCpu() float32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ContainerInstance) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ContainerInstance) GetAdditionalContainers() []*AdditionalContainer {
	if x != nil {
		return x.AdditionalContainers
	}
	return nil
}

func (x *ContainerInstance) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_LINUX
}

func (x *ContainerInstance) GetDockerfilePath() string {
	if x != nil {
		return x.DockerfilePath
	}
	return ""
}

func (x *ContainerInstance) GetOperationSystemVersion() string {
	if x != nil {
		return x.OperationSystemVersion
	}
	return ""
}

func (x *ContainerInstance) GetDockerArguments() map[string]string {
	if x != nil {
		return x.DockerArguments
	}
	return nil
}

func (x *ContainerInstance) GetPrivileged() bool {
	if x != nil {
		return x.Privileged
	}
	return false
}

type AdditionalContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image            string            `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Cpu              float32           `protobuf:"fixed32,3,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory           uint32            `protobuf:"varint,4,opt,name=memory,proto3" json:"memory,omitempty"` // in MB
	ContainerPort    uint32            `protobuf:"varint,5,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`
	Environment      map[string]string `protobuf:"bytes,6,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Command          []string          `protobuf:"bytes,7,rep,name=command,proto3" json:"command,omitempty"`
	ReadinessCommand []string          `protobuf:"bytes,8,rep,name=readiness_command,json=readinessCommand,proto3" json:"readiness_command,omitempty"`
	Privileged       bool              `protobuf:"varint,9,opt,name=privileged,proto3" json:"privileged,omitempty"`
	HostPort         uint32            `protobuf:"varint,10,opt,name=host_port,json=hostPort,proto3" json:"host_port,omitempty"`
}

func (x *AdditionalContainer) Reset() {
	*x = AdditionalContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalContainer) ProtoMessage() {}

func (x *AdditionalContainer) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalContainer.ProtoReflect.Descriptor instead.
func (*AdditionalContainer) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{38}
}

func (x *AdditionalContainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdditionalContainer) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *AdditionalContainer) GetCpu() float32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *AdditionalContainer) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *AdditionalContainer) GetContainerPort() uint32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *AdditionalContainer) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *AdditionalContainer) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *AdditionalContainer) GetReadinessCommand() []string {
	if x != nil {
		return x.ReadinessCommand
	}
	return nil
}

func (x *AdditionalContainer) GetPrivileged() bool {
	if x != nil {
		return x.Privileged
	}
	return false
}

func (x *AdditionalContainer) GetHostPort() uint32 {
	if x != nil {
		return x.HostPort
	}
	return 0
}

type PrebuiltImageInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository     string            `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Reference      string            `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	Platform       Platform          `protobuf:"varint,3,opt,name=platform,proto3,enum=org.cirruslabs.ci.services.cirruscigrpc.Platform" json:"platform,omitempty"`
	DockerfilePath string            `protobuf:"bytes,4,opt,name=dockerfile_path,json=dockerfilePath,proto3" json:"dockerfile_path,omitempty"`
	Arguments      map[string]string `protobuf:"bytes,5,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PrebuiltImageInstance) Reset() {
	*x = PrebuiltImageInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrebuiltImageInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrebuiltImageInstance) ProtoMessage() {}

func (x *PrebuiltImageInstance) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrebuiltImageInstance.ProtoReflect.Descriptor instead.
func (*PrebuiltImageInstance) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{39}
}

func (x *PrebuiltImageInstance) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *PrebuiltImageInstance) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *PrebuiltImageInstance) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_LINUX
}

func (x *PrebuiltImageInstance) GetDockerfilePath() string {
	if x != nil {
		return x.DockerfilePath
	}
	return ""
}

func (x *PrebuiltImageInstance) GetArguments() map[string]string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type LogEntry_LogKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdentification *TaskIdentification `protobuf:"bytes,1,opt,name=task_identification,json=taskIdentification,proto3" json:"task_identification,omitempty"`
	CommandName        string              `protobuf:"bytes,2,opt,name=command_name,json=commandName,proto3" json:"command_name,omitempty"`
	Raw                bool                `protobuf:"varint,3,opt,name=raw,proto3" json:"raw,omitempty"` // true to disable live updates
}

func (x *LogEntry_LogKey) Reset() {
	*x = LogEntry_LogKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEntry_LogKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry_LogKey) ProtoMessage() {}

func (x *LogEntry_LogKey) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry_LogKey.ProtoReflect.Descriptor instead.
func (*LogEntry_LogKey) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{3, 0}
}

func (x *LogEntry_LogKey) GetTaskIdentification() *TaskIdentification {
	if x != nil {
		return x.TaskIdentification
	}
	return nil
}

func (x *LogEntry_LogKey) GetCommandName() string {
	if x != nil {
		return x.CommandName
	}
	return ""
}

func (x *LogEntry_LogKey) GetRaw() bool {
	if x != nil {
		return x.Raw
	}
	return false
}

type CacheEntry_CacheKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdentification *TaskIdentification `protobuf:"bytes,1,opt,name=task_identification,json=taskIdentification,proto3" json:"task_identification,omitempty"`
	CacheKey           string              `protobuf:"bytes,2,opt,name=cache_key,json=cacheKey,proto3" json:"cache_key,omitempty"`
}

func (x *CacheEntry_CacheKey) Reset() {
	*x = CacheEntry_CacheKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheEntry_CacheKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheEntry_CacheKey) ProtoMessage() {}

func (x *CacheEntry_CacheKey) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheEntry_CacheKey.ProtoReflect.Descriptor instead.
func (*CacheEntry_CacheKey) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CacheEntry_CacheKey) GetTaskIdentification() *TaskIdentification {
	if x != nil {
		return x.TaskIdentification
	}
	return nil
}

func (x *CacheEntry_CacheKey) GetCacheKey() string {
	if x != nil {
		return x.CacheKey
	}
	return ""
}

type ArtifactEntry_ArtifactsUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIdentification *TaskIdentification `protobuf:"bytes,1,opt,name=task_identification,json=taskIdentification,proto3" json:"task_identification,omitempty"`
	Name               string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type               string              `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Format             string              `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *ArtifactEntry_ArtifactsUpload) Reset() {
	*x = ArtifactEntry_ArtifactsUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactEntry_ArtifactsUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactEntry_ArtifactsUpload) ProtoMessage() {}

func (x *ArtifactEntry_ArtifactsUpload) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactEntry_ArtifactsUpload.ProtoReflect.Descriptor instead.
func (*ArtifactEntry_ArtifactsUpload) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ArtifactEntry_ArtifactsUpload) GetTaskIdentification() *TaskIdentification {
	if x != nil {
		return x.TaskIdentification
	}
	return nil
}

func (x *ArtifactEntry_ArtifactsUpload) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArtifactEntry_ArtifactsUpload) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ArtifactEntry_ArtifactsUpload) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type ArtifactEntry_ArtifactChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtifactPath string `protobuf:"bytes,1,opt,name=artifact_path,json=artifactPath,proto3" json:"artifact_path,omitempty"`
	Data         []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ArtifactEntry_ArtifactChunk) Reset() {
	*x = ArtifactEntry_ArtifactChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactEntry_ArtifactChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactEntry_ArtifactChunk) ProtoMessage() {}

func (x *ArtifactEntry_ArtifactChunk) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactEntry_ArtifactChunk.ProtoReflect.Descriptor instead.
func (*ArtifactEntry_ArtifactChunk) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{7, 1}
}

func (x *ArtifactEntry_ArtifactChunk) GetArtifactPath() string {
	if x != nil {
		return x.ArtifactPath
	}
	return ""
}

func (x *ArtifactEntry_ArtifactChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Annotation_FileLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path        string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	StartLine   int64  `protobuf:"varint,2,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine     int64  `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	StartColumn int64  `protobuf:"varint,4,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"`
	EndColumn   int64  `protobuf:"varint,5,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`
}

func (x *Annotation_FileLocation) Reset() {
	*x = Annotation_FileLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation_FileLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation_FileLocation) ProtoMessage() {}

func (x *Annotation_FileLocation) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation_FileLocation.ProtoReflect.Descriptor instead.
func (*Annotation_FileLocation) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{14, 0}
}

func (x *Annotation_FileLocation) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Annotation_FileLocation) GetStartLine() int64 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *Annotation_FileLocation) GetEndLine() int64 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *Annotation_FileLocation) GetStartColumn() int64 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *Annotation_FileLocation) GetEndColumn() int64 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

type Task_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueLabels []string          `protobuf:"bytes,1,rep,name=unique_labels,json=uniqueLabels,proto3" json:"unique_labels,omitempty"`
	Properties   map[string]string `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Task_Metadata) Reset() {
	*x = Task_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Metadata) ProtoMessage() {}

func (x *Task_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Metadata.ProtoReflect.Descriptor instead.
func (*Task_Metadata) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{26, 0}
}

func (x *Task_Metadata) GetUniqueLabels() []string {
	if x != nil {
		return x.UniqueLabels
	}
	return nil
}

func (x *Task_Metadata) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type Task_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"` // one of the *Instance from below
}

func (x *Task_Instance) Reset() {
	*x = Task_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrus_ci_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Instance) ProtoMessage() {}

func (x *Task_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_cirrus_ci_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Instance.ProtoReflect.Descriptor instead.
func (*Task_Instance) Descriptor() ([]byte, []int) {
	return file_cirrus_ci_service_proto_rawDescGZIP(), []int{26, 1}
}

func (x *Task_Instance) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Task_Instance) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_cirrus_ci_service_proto protoreflect.FileDescriptor

var file_cirrus_ci_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x5f, 0x63, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72,
	0x70, 0x63, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x12, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x22, 0x42, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xe3, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x6c, 0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75,
	0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xdb, 0x02, 0x0a, 0x08,
	0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x4b, 0x65, 0x79, 0x48,
	0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x1a, 0xab, 0x01, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x6c, 0x0a,
	0x13, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x61, 0x77,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x12, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x6f, 0x67, 0x67,
	0x65, 0x64, 0x22, 0xcb, 0x02, 0x0a, 0x0a, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x50, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c,
	0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x1a,
	0x95, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x6c, 0x0a, 0x13,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x36, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x53, 0x61, 0x76, 0x65, 0x64, 0x22, 0xf7, 0x03, 0x0a, 0x0d, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x73, 0x0a, 0x10, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75,
	0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0f,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x5c, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0xbf, 0x01,
	0x0a, 0x0f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x6c, 0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a,
	0x48, 0x0a, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x3a, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x61, 0x76, 0x65, 0x64, 0x22, 0xa1,
	0x01, 0x0a, 0x14, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75,
	0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4b,
	0x65, 0x79, 0x22, 0xb7, 0x03, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73,
	0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69,
	0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x54, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x41, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x63, 0x65, 0x1a, 0x3e, 0x0a, 0x10,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x02, 0x0a,
	0x1a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x13, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x64, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x78,
	0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xac, 0x02, 0x0a, 0x1b,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x1a, 0x48, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x01, 0x0a, 0x1f, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c,
	0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63,
	0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61,
	0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x9b, 0x05, 0x0a, 0x0a, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x38, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62,
	0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69,
	0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x4f, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73,
	0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72,
	0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x61, 0x77, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x61, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x65,
	0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9e, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x2d, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x02, 0x22, 0x4a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x49, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10,
	0x03, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73,
	0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x10, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c,
	0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63,
	0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x9d, 0x01, 0x0a, 0x09, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x12,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x11, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73,
	0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xb9, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61,
	0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f,
	0x70, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x13,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x18, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75,
	0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0x9a, 0x01,
	0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0xba, 0x03, 0x0a, 0x12, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6e, 0x0a, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x74, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72,
	0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75,
	0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x22, 0xa2, 0x08, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73,
	0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72,
	0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x60, 0x0a,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c,
	0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x52, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61,
	0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x67, 0x0a, 0x13, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62,
	0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69,
	0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xd6, 0x01, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x66,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c,
	0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a,
	0x3e, 0x0a, 0x10, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x77, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x07, 0x22, 0xa0, 0x0a, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x10, 0x65, 0x78, 0x69, 0x74,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c,
	0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x69,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f,
	0x65, 0x78, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x6b, 0x0a, 0x12, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63,
	0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8a, 0x01, 0x0a,
	0x1d, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75,
	0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1b, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x11, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75,
	0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x18, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x68, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63,
	0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x10, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75,
	0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x74, 0x0a, 0x15, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62,
	0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69,
	0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x14, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75,
	0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52,
	0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x75, 0x72, 0x12, 0x60, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69,
	0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x02, 0x42, 0x0d, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x11, 0x0a, 0x0f, 0x45,
	0x78, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2d,
	0x0a, 0x11, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x22, 0x37, 0x0a,
	0x1b, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22,
	0x37, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a,
	0x0f, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x19, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x17, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x58, 0x0a, 0x14, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x38, 0x0a,
	0x0c, 0x50, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0xd8, 0x04, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x71, 0x0a,
	0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73,
	0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x4d, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c,
	0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73,
	0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x64,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x1a, 0x42,
	0x0a, 0x14, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc5, 0x03, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x6f, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x02, 0x0a, 0x15, 0x50,
	0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75,
	0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x6b, 0x0a, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75,
	0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x22, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10, 0x01, 0x32, 0xed, 0x10, 0x0a, 0x0f, 0x43, 0x69,
	0x72, 0x72, 0x75, 0x73, 0x43, 0x49, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8f, 0x01,
	0x0a, 0x0f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x12, 0x3f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61,
	0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c,
	0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xa2, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x43, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69,
	0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73,
	0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x80, 0x01,
	0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x31, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73,
	0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a,
	0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73,
	0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72,
	0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x12, 0x7e, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x31, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73,
	0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a,
	0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73,
	0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72,
	0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x12, 0x84, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62,
	0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69,
	0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x3c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x36, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63,
	0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x1a, 0x40, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73,
	0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x3d, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63,
	0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x39, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62,
	0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69,
	0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63,
	0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x04, 0x50, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x12, 0x39, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61,
	0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73,
	0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x3e, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73,
	0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f,
	0x70, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x42, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x42,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x11,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x12, 0x41, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61,
	0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6c,
	0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x3f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61,
	0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a,
	0x0b, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73,
	0x63, 0x69, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x6a, 0x0a, 0x2c, 0x6f, 0x72, 0x67,
	0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x63, 0x69,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x42, 0x0d, 0x43, 0x69, 0x72, 0x72, 0x75,
	0x73, 0x43, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x6c, 0x61, 0x62,
	0x73, 0x2f, 0x63, 0x69, 0x72, 0x72, 0x75, 0x73, 0x2d, 0x63, 0x69, 0x2d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cirrus_ci_service_proto_rawDescOnce sync.Once
	file_cirrus_ci_service_proto_rawDescData = file_cirrus_ci_service_proto_rawDesc
)

func file_cirrus_ci_service_proto_rawDescGZIP() []byte {
	file_cirrus_ci_service_proto_rawDescOnce.Do(func() {
		file_cirrus_ci_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_cirrus_ci_service_proto_rawDescData)
	})
	return file_cirrus_ci_service_proto_rawDescData
}

var file_cirrus_ci_service_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_cirrus_ci_service_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_cirrus_ci_service_proto_goTypes = []interface{}{
	(Platform)(0),                           // 0: org.cirruslabs.ci.services.cirruscigrpc.Platform
	(Annotation_Level)(0),                   // 1: org.cirruslabs.ci.services.cirruscigrpc.Annotation.Level
	(Annotation_Type)(0),                    // 2: org.cirruslabs.ci.services.cirruscigrpc.Annotation.Type
	(Task_Status)(0),                        // 3: org.cirruslabs.ci.services.cirruscigrpc.Task.Status
	(Command_CommandExecutionBehavior)(0),   // 4: org.cirruslabs.ci.services.cirruscigrpc.Command.CommandExecutionBehavior
	(*TaskIdentification)(nil),              // 5: org.cirruslabs.ci.services.cirruscigrpc.TaskIdentification
	(*DataChunk)(nil),                       // 6: org.cirruslabs.ci.services.cirruscigrpc.DataChunk
	(*InitialCommandsRequest)(nil),          // 7: org.cirruslabs.ci.services.cirruscigrpc.InitialCommandsRequest
	(*LogEntry)(nil),                        // 8: org.cirruslabs.ci.services.cirruscigrpc.LogEntry
	(*UploadLogsResponse)(nil),              // 9: org.cirruslabs.ci.services.cirruscigrpc.UploadLogsResponse
	(*CacheEntry)(nil),                      // 10: org.cirruslabs.ci.services.cirruscigrpc.CacheEntry
	(*UploadCacheResponse)(nil),             // 11: org.cirruslabs.ci.services.cirruscigrpc.UploadCacheResponse
	(*ArtifactEntry)(nil),                   // 12: org.cirruslabs.ci.services.cirruscigrpc.ArtifactEntry
	(*UploadArtifactsResponse)(nil),         // 13: org.cirruslabs.ci.services.cirruscigrpc.UploadArtifactsResponse
	(*DownloadCacheRequest)(nil),            // 14: org.cirruslabs.ci.services.cirruscigrpc.DownloadCacheRequest
	(*CommandsResponse)(nil),                // 15: org.cirruslabs.ci.services.cirruscigrpc.CommandsResponse
	(*ReportSingleCommandRequest)(nil),      // 16: org.cirruslabs.ci.services.cirruscigrpc.ReportSingleCommandRequest
	(*ReportSingleCommandResponse)(nil),     // 17: org.cirruslabs.ci.services.cirruscigrpc.ReportSingleCommandResponse
	(*ReportAnnotationsCommandRequest)(nil), // 18: org.cirruslabs.ci.services.cirruscigrpc.ReportAnnotationsCommandRequest
	(*Annotation)(nil),                      // 19: org.cirruslabs.ci.services.cirruscigrpc.Annotation
	(*HeartbeatRequest)(nil),                // 20: org.cirruslabs.ci.services.cirruscigrpc.HeartbeatRequest
	(*HeartbeatResponse)(nil),               // 21: org.cirruslabs.ci.services.cirruscigrpc.HeartbeatResponse
	(*CacheInfoRequest)(nil),                // 22: org.cirruslabs.ci.services.cirruscigrpc.CacheInfoRequest
	(*CacheInfo)(nil),                       // 23: org.cirruslabs.ci.services.cirruscigrpc.CacheInfo
	(*CacheInfoResponse)(nil),               // 24: org.cirruslabs.ci.services.cirruscigrpc.CacheInfoResponse
	(*ReportAgentProblemRequest)(nil),       // 25: org.cirruslabs.ci.services.cirruscigrpc.ReportAgentProblemRequest
	(*ReportStopHookRequest)(nil),           // 26: org.cirruslabs.ci.services.cirruscigrpc.ReportStopHookRequest
	(*ReportAgentSignalRequest)(nil),        // 27: org.cirruslabs.ci.services.cirruscigrpc.ReportAgentSignalRequest
	(*ReportAgentLogsRequest)(nil),          // 28: org.cirruslabs.ci.services.cirruscigrpc.ReportAgentLogsRequest
	(*ParseConfigRequest)(nil),              // 29: org.cirruslabs.ci.services.cirruscigrpc.ParseConfigRequest
	(*ParseConfigResponse)(nil),             // 30: org.cirruslabs.ci.services.cirruscigrpc.ParseConfigResponse
	(*Task)(nil),                            // 31: org.cirruslabs.ci.services.cirruscigrpc.Task
	(*Command)(nil),                         // 32: org.cirruslabs.ci.services.cirruscigrpc.Command
	(*ExitInstruction)(nil),                 // 33: org.cirruslabs.ci.services.cirruscigrpc.ExitInstruction
	(*ScriptInstruction)(nil),               // 34: org.cirruslabs.ci.services.cirruscigrpc.ScriptInstruction
	(*BackgroundScriptInstruction)(nil),     // 35: org.cirruslabs.ci.services.cirruscigrpc.BackgroundScriptInstruction
	(*CacheInstruction)(nil),                // 36: org.cirruslabs.ci.services.cirruscigrpc.CacheInstruction
	(*UploadCacheInstruction)(nil),          // 37: org.cirruslabs.ci.services.cirruscigrpc.UploadCacheInstruction
	(*CloneInstruction)(nil),                // 38: org.cirruslabs.ci.services.cirruscigrpc.CloneInstruction
	(*FileInstruction)(nil),                 // 39: org.cirruslabs.ci.services.cirruscigrpc.FileInstruction
	(*ArtifactsInstruction)(nil),            // 40: org.cirruslabs.ci.services.cirruscigrpc.ArtifactsInstruction
	(*PipeInstance)(nil),                    // 41: org.cirruslabs.ci.services.cirruscigrpc.PipeInstance
	(*ContainerInstance)(nil),               // 42: org.cirruslabs.ci.services.cirruscigrpc.ContainerInstance
	(*AdditionalContainer)(nil),             // 43: org.cirruslabs.ci.services.cirruscigrpc.AdditionalContainer
	(*PrebuiltImageInstance)(nil),           // 44: org.cirruslabs.ci.services.cirruscigrpc.PrebuiltImageInstance
	(*LogEntry_LogKey)(nil),                 // 45: org.cirruslabs.ci.services.cirruscigrpc.LogEntry.LogKey
	(*CacheEntry_CacheKey)(nil),             // 46: org.cirruslabs.ci.services.cirruscigrpc.CacheEntry.CacheKey
	(*ArtifactEntry_ArtifactsUpload)(nil),   // 47: org.cirruslabs.ci.services.cirruscigrpc.ArtifactEntry.ArtifactsUpload
	(*ArtifactEntry_ArtifactChunk)(nil),     // 48: org.cirruslabs.ci.services.cirruscigrpc.ArtifactEntry.ArtifactChunk
	nil,                                     // 49: org.cirruslabs.ci.services.cirruscigrpc.CommandsResponse.EnvironmentEntry
	nil,                                     // 50: org.cirruslabs.ci.services.cirruscigrpc.ReportSingleCommandResponse.AdditionalEnvironmentEntry
	(*Annotation_FileLocation)(nil),         // 51: org.cirruslabs.ci.services.cirruscigrpc.Annotation.FileLocation
	nil,                                     // 52: org.cirruslabs.ci.services.cirruscigrpc.ParseConfigRequest.EnvironmentEntry
	nil,                                     // 53: org.cirruslabs.ci.services.cirruscigrpc.ParseConfigRequest.FilesContentsEntry
	(*Task_Metadata)(nil),                   // 54: org.cirruslabs.ci.services.cirruscigrpc.Task.Metadata
	(*Task_Instance)(nil),                   // 55: org.cirruslabs.ci.services.cirruscigrpc.Task.Instance
	nil,                                     // 56: org.cirruslabs.ci.services.cirruscigrpc.Task.EnvironmentEntry
	nil,                                     // 57: org.cirruslabs.ci.services.cirruscigrpc.Task.Metadata.PropertiesEntry
	nil,                                     // 58: org.cirruslabs.ci.services.cirruscigrpc.Command.PropertiesEntry
	nil,                                     // 59: org.cirruslabs.ci.services.cirruscigrpc.ContainerInstance.DockerArgumentsEntry
	nil,                                     // 60: org.cirruslabs.ci.services.cirruscigrpc.AdditionalContainer.EnvironmentEntry
	nil,                                     // 61: org.cirruslabs.ci.services.cirruscigrpc.PrebuiltImageInstance.ArgumentsEntry
	(*any.Any)(nil),                         // 62: google.protobuf.Any
	(*empty.Empty)(nil),                     // 63: google.protobuf.Empty
}
var file_cirrus_ci_service_proto_depIdxs = []int32{
	5,  // 0: org.cirruslabs.ci.services.cirruscigrpc.InitialCommandsRequest.task_identification:type_name -> org.cirruslabs.ci.services.cirruscigrpc.TaskIdentification
	45, // 1: org.cirruslabs.ci.services.cirruscigrpc.LogEntry.key:type_name -> org.cirruslabs.ci.services.cirruscigrpc.LogEntry.LogKey
	6,  // 2: org.cirruslabs.ci.services.cirruscigrpc.LogEntry.chunk:type_name -> org.cirruslabs.ci.services.cirruscigrpc.DataChunk
	46, // 3: org.cirruslabs.ci.services.cirruscigrpc.CacheEntry.key:type_name -> org.cirruslabs.ci.services.cirruscigrpc.CacheEntry.CacheKey
	6,  // 4: org.cirruslabs.ci.services.cirruscigrpc.CacheEntry.chunk:type_name -> org.cirruslabs.ci.services.cirruscigrpc.DataChunk
	47, // 5: org.cirruslabs.ci.services.cirruscigrpc.ArtifactEntry.artifacts_upload:type_name -> org.cirruslabs.ci.services.cirruscigrpc.ArtifactEntry.ArtifactsUpload
	48, // 6: org.cirruslabs.ci.services.cirruscigrpc.ArtifactEntry.chunk:type_name -> org.cirruslabs.ci.services.cirruscigrpc.ArtifactEntry.ArtifactChunk
	5,  // 7: org.cirruslabs.ci.services.cirruscigrpc.DownloadCacheRequest.task_identification:type_name -> org.cirruslabs.ci.services.cirruscigrpc.TaskIdentification
	49, // 8: org.cirruslabs.ci.services.cirruscigrpc.CommandsResponse.environment:type_name -> org.cirruslabs.ci.services.cirruscigrpc.CommandsResponse.EnvironmentEntry
	32, // 9: org.cirruslabs.ci.services.cirruscigrpc.CommandsResponse.commands:type_name -> org.cirruslabs.ci.services.cirruscigrpc.Command
	5,  // 10: org.cirruslabs.ci.services.cirruscigrpc.ReportSingleCommandRequest.task_identification:type_name -> org.cirruslabs.ci.services.cirruscigrpc.TaskIdentification
	50, // 11: org.cirruslabs.ci.services.cirruscigrpc.ReportSingleCommandResponse.additional_environment:type_name -> org.cirruslabs.ci.services.cirruscigrpc.ReportSingleCommandResponse.AdditionalEnvironmentEntry
	5,  // 12: org.cirruslabs.ci.services.cirruscigrpc.ReportAnnotationsCommandRequest.task_identification:type_name -> org.cirruslabs.ci.services.cirruscigrpc.TaskIdentification
	19, // 13: org.cirruslabs.ci.services.cirruscigrpc.ReportAnnotationsCommandRequest.annotations:type_name -> org.cirruslabs.ci.services.cirruscigrpc.Annotation
	2,  // 14: org.cirruslabs.ci.services.cirruscigrpc.Annotation.type:type_name -> org.cirruslabs.ci.services.cirruscigrpc.Annotation.Type
	1,  // 15: org.cirruslabs.ci.services.cirruscigrpc.Annotation.level:type_name -> org.cirruslabs.ci.services.cirruscigrpc.Annotation.Level
	51, // 16: org.cirruslabs.ci.services.cirruscigrpc.Annotation.file_location:type_name -> org.cirruslabs.ci.services.cirruscigrpc.Annotation.FileLocation
	5,  // 17: org.cirruslabs.ci.services.cirruscigrpc.HeartbeatRequest.task_identification:type_name -> org.cirruslabs.ci.services.cirruscigrpc.TaskIdentification
	5,  // 18: org.cirruslabs.ci.services.cirruscigrpc.CacheInfoRequest.task_identification:type_name -> org.cirruslabs.ci.services.cirruscigrpc.TaskIdentification
	23, // 19: org.cirruslabs.ci.services.cirruscigrpc.CacheInfoResponse.info:type_name -> org.cirruslabs.ci.services.cirruscigrpc.CacheInfo
	5,  // 20: org.cirruslabs.ci.services.cirruscigrpc.ReportAgentProblemRequest.task_identification:type_name -> org.cirruslabs.ci.services.cirruscigrpc.TaskIdentification
	5,  // 21: org.cirruslabs.ci.services.cirruscigrpc.ReportStopHookRequest.task_identification:type_name -> org.cirruslabs.ci.services.cirruscigrpc.TaskIdentification
	5,  // 22: org.cirruslabs.ci.services.cirruscigrpc.ReportAgentSignalRequest.task_identification:type_name -> org.cirruslabs.ci.services.cirruscigrpc.TaskIdentification
	5,  // 23: org.cirruslabs.ci.services.cirruscigrpc.ReportAgentLogsRequest.task_identification:type_name -> org.cirruslabs.ci.services.cirruscigrpc.TaskIdentification
	52, // 24: org.cirruslabs.ci.services.cirruscigrpc.ParseConfigRequest.environment:type_name -> org.cirruslabs.ci.services.cirruscigrpc.ParseConfigRequest.EnvironmentEntry
	53, // 25: org.cirruslabs.ci.services.cirruscigrpc.ParseConfigRequest.filesContents:type_name -> org.cirruslabs.ci.services.cirruscigrpc.ParseConfigRequest.FilesContentsEntry
	31, // 26: org.cirruslabs.ci.services.cirruscigrpc.ParseConfigResponse.tasks:type_name -> org.cirruslabs.ci.services.cirruscigrpc.Task
	3,  // 27: org.cirruslabs.ci.services.cirruscigrpc.Task.status:type_name -> org.cirruslabs.ci.services.cirruscigrpc.Task.Status
	56, // 28: org.cirruslabs.ci.services.cirruscigrpc.Task.environment:type_name -> org.cirruslabs.ci.services.cirruscigrpc.Task.EnvironmentEntry
	54, // 29: org.cirruslabs.ci.services.cirruscigrpc.Task.metadata:type_name -> org.cirruslabs.ci.services.cirruscigrpc.Task.Metadata
	55, // 30: org.cirruslabs.ci.services.cirruscigrpc.Task.deprecated_instance:type_name -> org.cirruslabs.ci.services.cirruscigrpc.Task.Instance
	32, // 31: org.cirruslabs.ci.services.cirruscigrpc.Task.commands:type_name -> org.cirruslabs.ci.services.cirruscigrpc.Command
	62, // 32: org.cirruslabs.ci.services.cirruscigrpc.Task.instance:type_name -> google.protobuf.Any
	33, // 33: org.cirruslabs.ci.services.cirruscigrpc.Command.exit_instruction:type_name -> org.cirruslabs.ci.services.cirruscigrpc.ExitInstruction
	34, // 34: org.cirruslabs.ci.services.cirruscigrpc.Command.script_instruction:type_name -> org.cirruslabs.ci.services.cirruscigrpc.ScriptInstruction
	35, // 35: org.cirruslabs.ci.services.cirruscigrpc.Command.background_script_instruction:type_name -> org.cirruslabs.ci.services.cirruscigrpc.BackgroundScriptInstruction
	36, // 36: org.cirruslabs.ci.services.cirruscigrpc.Command.cache_instruction:type_name -> org.cirruslabs.ci.services.cirruscigrpc.CacheInstruction
	37, // 37: org.cirruslabs.ci.services.cirruscigrpc.Command.upload_cache_instruction:type_name -> org.cirruslabs.ci.services.cirruscigrpc.UploadCacheInstruction
	38, // 38: org.cirruslabs.ci.services.cirruscigrpc.Command.clone_instruction:type_name -> org.cirruslabs.ci.services.cirruscigrpc.CloneInstruction
	39, // 39: org.cirruslabs.ci.services.cirruscigrpc.Command.file_instruction:type_name -> org.cirruslabs.ci.services.cirruscigrpc.FileInstruction
	40, // 40: org.cirruslabs.ci.services.cirruscigrpc.Command.artifacts_instruction:type_name -> org.cirruslabs.ci.services.cirruscigrpc.ArtifactsInstruction
	4,  // 41: org.cirruslabs.ci.services.cirruscigrpc.Command.execution_behaviour:type_name -> org.cirruslabs.ci.services.cirruscigrpc.Command.CommandExecutionBehavior
	58, // 42: org.cirruslabs.ci.services.cirruscigrpc.Command.properties:type_name -> org.cirruslabs.ci.services.cirruscigrpc.Command.PropertiesEntry
	43, // 43: org.cirruslabs.ci.services.cirruscigrpc.ContainerInstance.additional_containers:type_name -> org.cirruslabs.ci.services.cirruscigrpc.AdditionalContainer
	0,  // 44: org.cirruslabs.ci.services.cirruscigrpc.ContainerInstance.platform:type_name -> org.cirruslabs.ci.services.cirruscigrpc.Platform
	59, // 45: org.cirruslabs.ci.services.cirruscigrpc.ContainerInstance.docker_arguments:type_name -> org.cirruslabs.ci.services.cirruscigrpc.ContainerInstance.DockerArgumentsEntry
	60, // 46: org.cirruslabs.ci.services.cirruscigrpc.AdditionalContainer.environment:type_name -> org.cirruslabs.ci.services.cirruscigrpc.AdditionalContainer.EnvironmentEntry
	0,  // 47: org.cirruslabs.ci.services.cirruscigrpc.PrebuiltImageInstance.platform:type_name -> org.cirruslabs.ci.services.cirruscigrpc.Platform
	61, // 48: org.cirruslabs.ci.services.cirruscigrpc.PrebuiltImageInstance.arguments:type_name -> org.cirruslabs.ci.services.cirruscigrpc.PrebuiltImageInstance.ArgumentsEntry
	5,  // 49: org.cirruslabs.ci.services.cirruscigrpc.LogEntry.LogKey.task_identification:type_name -> org.cirruslabs.ci.services.cirruscigrpc.TaskIdentification
	5,  // 50: org.cirruslabs.ci.services.cirruscigrpc.CacheEntry.CacheKey.task_identification:type_name -> org.cirruslabs.ci.services.cirruscigrpc.TaskIdentification
	5,  // 51: org.cirruslabs.ci.services.cirruscigrpc.ArtifactEntry.ArtifactsUpload.task_identification:type_name -> org.cirruslabs.ci.services.cirruscigrpc.TaskIdentification
	57, // 52: org.cirruslabs.ci.services.cirruscigrpc.Task.Metadata.properties:type_name -> org.cirruslabs.ci.services.cirruscigrpc.Task.Metadata.PropertiesEntry
	7,  // 53: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.InitialCommands:input_type -> org.cirruslabs.ci.services.cirruscigrpc.InitialCommandsRequest
	16, // 54: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.ReportSingleCommand:input_type -> org.cirruslabs.ci.services.cirruscigrpc.ReportSingleCommandRequest
	18, // 55: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.ReportAnnotations:input_type -> org.cirruslabs.ci.services.cirruscigrpc.ReportAnnotationsCommandRequest
	8,  // 56: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.StreamLogs:input_type -> org.cirruslabs.ci.services.cirruscigrpc.LogEntry
	8,  // 57: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.SaveLogs:input_type -> org.cirruslabs.ci.services.cirruscigrpc.LogEntry
	10, // 58: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.UploadCache:input_type -> org.cirruslabs.ci.services.cirruscigrpc.CacheEntry
	12, // 59: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.UploadArtifacts:input_type -> org.cirruslabs.ci.services.cirruscigrpc.ArtifactEntry
	14, // 60: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.DownloadCache:input_type -> org.cirruslabs.ci.services.cirruscigrpc.DownloadCacheRequest
	22, // 61: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.CacheInfo:input_type -> org.cirruslabs.ci.services.cirruscigrpc.CacheInfoRequest
	63, // 62: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.Ping:input_type -> google.protobuf.Empty
	20, // 63: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.Heartbeat:input_type -> org.cirruslabs.ci.services.cirruscigrpc.HeartbeatRequest
	26, // 64: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.ReportStopHook:input_type -> org.cirruslabs.ci.services.cirruscigrpc.ReportStopHookRequest
	25, // 65: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.ReportAgentError:input_type -> org.cirruslabs.ci.services.cirruscigrpc.ReportAgentProblemRequest
	25, // 66: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.ReportAgentWarning:input_type -> org.cirruslabs.ci.services.cirruscigrpc.ReportAgentProblemRequest
	27, // 67: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.ReportAgentSignal:input_type -> org.cirruslabs.ci.services.cirruscigrpc.ReportAgentSignalRequest
	28, // 68: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.ReportAgentLogs:input_type -> org.cirruslabs.ci.services.cirruscigrpc.ReportAgentLogsRequest
	29, // 69: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.ParseConfig:input_type -> org.cirruslabs.ci.services.cirruscigrpc.ParseConfigRequest
	15, // 70: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.InitialCommands:output_type -> org.cirruslabs.ci.services.cirruscigrpc.CommandsResponse
	17, // 71: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.ReportSingleCommand:output_type -> org.cirruslabs.ci.services.cirruscigrpc.ReportSingleCommandResponse
	63, // 72: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.ReportAnnotations:output_type -> google.protobuf.Empty
	9,  // 73: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.StreamLogs:output_type -> org.cirruslabs.ci.services.cirruscigrpc.UploadLogsResponse
	9,  // 74: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.SaveLogs:output_type -> org.cirruslabs.ci.services.cirruscigrpc.UploadLogsResponse
	11, // 75: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.UploadCache:output_type -> org.cirruslabs.ci.services.cirruscigrpc.UploadCacheResponse
	13, // 76: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.UploadArtifacts:output_type -> org.cirruslabs.ci.services.cirruscigrpc.UploadArtifactsResponse
	6,  // 77: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.DownloadCache:output_type -> org.cirruslabs.ci.services.cirruscigrpc.DataChunk
	24, // 78: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.CacheInfo:output_type -> org.cirruslabs.ci.services.cirruscigrpc.CacheInfoResponse
	63, // 79: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.Ping:output_type -> google.protobuf.Empty
	21, // 80: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.Heartbeat:output_type -> org.cirruslabs.ci.services.cirruscigrpc.HeartbeatResponse
	63, // 81: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.ReportStopHook:output_type -> google.protobuf.Empty
	63, // 82: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.ReportAgentError:output_type -> google.protobuf.Empty
	63, // 83: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.ReportAgentWarning:output_type -> google.protobuf.Empty
	63, // 84: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.ReportAgentSignal:output_type -> google.protobuf.Empty
	63, // 85: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.ReportAgentLogs:output_type -> google.protobuf.Empty
	30, // 86: org.cirruslabs.ci.services.cirruscigrpc.CirrusCIService.ParseConfig:output_type -> org.cirruslabs.ci.services.cirruscigrpc.ParseConfigResponse
	70, // [70:87] is the sub-list for method output_type
	53, // [53:70] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_cirrus_ci_service_proto_init() }
func file_cirrus_ci_service_proto_init() {
	if File_cirrus_ci_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cirrus_ci_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialCommandsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadArtifactsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportSingleCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportSingleCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportAnnotationsCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportAgentProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStopHookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportAgentSignalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportAgentLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackgroundScriptInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadCacheInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipeInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrebuiltImageInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEntry_LogKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheEntry_CacheKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactEntry_ArtifactsUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactEntry_ArtifactChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation_FileLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrus_ci_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cirrus_ci_service_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*LogEntry_Key)(nil),
		(*LogEntry_Chunk)(nil),
	}
	file_cirrus_ci_service_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*CacheEntry_Key)(nil),
		(*CacheEntry_Chunk)(nil),
	}
	file_cirrus_ci_service_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ArtifactEntry_ArtifactsUpload_)(nil),
		(*ArtifactEntry_Chunk)(nil),
	}
	file_cirrus_ci_service_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*Command_ExitInstruction)(nil),
		(*Command_ScriptInstruction)(nil),
		(*Command_BackgroundScriptInstruction)(nil),
		(*Command_CacheInstruction)(nil),
		(*Command_UploadCacheInstruction)(nil),
		(*Command_CloneInstruction)(nil),
		(*Command_FileInstruction)(nil),
		(*Command_ArtifactsInstruction)(nil),
	}
	file_cirrus_ci_service_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*FileInstruction_FromEnvironmentVariable)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cirrus_ci_service_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cirrus_ci_service_proto_goTypes,
		DependencyIndexes: file_cirrus_ci_service_proto_depIdxs,
		EnumInfos:         file_cirrus_ci_service_proto_enumTypes,
		MessageInfos:      file_cirrus_ci_service_proto_msgTypes,
	}.Build()
	File_cirrus_ci_service_proto = out.File
	file_cirrus_ci_service_proto_rawDesc = nil
	file_cirrus_ci_service_proto_goTypes = nil
	file_cirrus_ci_service_proto_depIdxs = nil
}
